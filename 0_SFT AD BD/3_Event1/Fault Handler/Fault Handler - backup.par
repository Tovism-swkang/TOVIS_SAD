#@ 240914 


#    
    ##! EVENT0과 CMDSEQ1에서 발생한 여러 Fault에 대한 Handling을 여기서 처리. (EVNET2)
    ##$ Deserializer 24번 핀 - Host의 Ext Flash에 대한 접근 권한 요청 (양책임님 - V2에서 HW Rev으로 반영 예정)
    ##$ 아래는 예시 
    ##$ Net name : EXT_FLASH_EN 
    ##$ Direction : Deserializer -> EXT_FLASH_EN -> Indigo4 
    ##$ 평소에는 Low. "FW 업데이트 요청 및 FW Writing" 중에는 High 유지. FW 업데이트 완료되면 Low Return  
    ##$                            --------------------------------------------------                                3.3V 
    ##$      idle (low )           |     Fault Log Request (high)                   |      completed (low)
    ##$ ----------------------------                                                -------------------------------- 0V 
    ##$ high 상태 : Indigo의 SPI Switch IC disabled -> Host의 Ext Flash 접근 불가 
    ##$ low 상태 : Indigo의 SPI Switch IC enabled -> Host의 Ext Flash 접근 가능 
    #
    #
    ##$ Indigo 변수 
    ##$ RAM      0xnnnnnnnn   Fault_Occurrence   : 0x00000000   NO,   NOT 0x00000000   YES,                                      Indigo만 RW  
    #
    ##! 고려사항 
    ##! Indigo의 Event Handler 구간에는 시간 소요가 최대한 적게 소요되어야 함. Timer 주기가 어긋나지 않도록. 
    #
    ##! Host와 Indigo 간에 Int Flash를 쓰고 읽는 과정에서 버스 충돌이 발생할 수도 있으므로, 별도의 Pin(EXT_FLASH_EN)이 있어야 한다고 판단 됨. 해당 Pin으로 Sequence 기준을 잡을 수 있음. 
    ##! Host가 FW를 Writing하다가 통신 실패가 될 수도 있기 때문에, 완료 됐을 때 Host가 직접 Flag를 남겨야 함. 
    #
    ##! EXT_FLASH_EN pin의 기능이 FW Update와 겹침. Indigo에서는 상태 변수로 조건 분기 시켜야 함. 
    #
    #
    ##! FW Update의 시작 주체는 Host, Fault Log의 시작 주체는 Indigo 
    ##! Fault Log는 주기적 반복. 
    ##! FW Update는 비반복적. 
    ##! EXT_FLASH_EN pin 컨트롤 주체는 Host 
    ##! SPI Switch IC En/Dis 컨트롤 주체는 Indigo. (FW Update와 Fault Log의 동시 수행이나 수행 순서에 따라, 잘못하면 FW Update 도중에 Host의 접근을 막아버릴 수도 있음.)
    #
    ##! Int/Ext Flash : Indigo가 Write를 먼저 하고, Host가 Write. (Fault는 Indigo에서 발생. )
    #
    ##^ Host 입장에서 순서 요약 
    ##^ 1. Indigo로부터 SYS_FAULT pin 신호 수신 (Fualt occured)
    ##^ 2. EXT_FLASH_EN pin OUTPUT high (접근 권한 요청)
    ##^ 3. Read Fault Log 
    ##^ 4. EXT_FLASH_EN pin OUTPUT low (접근 권한 해제)
    #
    #
    #Timeline 
    #1. Indigo - Fault_Occurrence 변수 Check 
    #1-1. Occurred (NOT 0x00000000) -> 2번으로 이동 
    #1-2. Not Occurred (0x00000000) -> Event Exit 
    #
    #2. Indigo - Fault Log Hex2Bit (30여개 이상의 32bit 단위 flag 변수를 32bit 정도의 bit 단위 flag로 변환)
    #3. Indigo - Fault Logger (Flash에 Write) #? Int? Ext? 
    #4. Indigo - SYS_FAULT pin OUTPUT Low (Indigo -> Host) 
    #
    #5. Host - EXT_FLASH_EN pin OUTPUT High 
    #
    #6. Indigo - EXT_FLASH_EN pin check 
    #
    #
    #2. Indigo - Fault_Log_Read_Flag 변수 check (Host의 log read 완료 여부 확인) 
    #2-1. if 0xFFFFFFFF, Finished reading? -> 
    #2-2. Not yet? -> 
    #
    #2. Indigo - Fault Log Hex2Bit 
    #3. Indigo - Fault Logger (Flash에 Write) #? Int? Ext? 
    #
    #
    #Indigo - Fault_Log_Read_Flag = 
    #4. Indigo - SYS_FAULT pin OUTPUT (Indigo -> Host) #? high? low? 
    #
    #5. Host - EXT_FLASH_EN pin OUTPUT high (Host -> Indigo) 
    #
    #6. Indigo - EXT_FLASH_EN pin detection 
    #6-1. if Low 
    #            Host의 Read 완료         
    #6-2. if high 
    #
    #
    #Host - EXT_FLASH_EN pin OUTPUT low 
    #Indigo - Fault_Occurrence clear (0x00000000)
    #
    #1. Host - i2c로 Int Flash 특정 영역에 F/W version write #? 위치 정해야 함. 예를 들어 47 sector의 n 번지. 
    #2. Host - Ext Flash 접근 권한 요청 (Host의 Deserializer 24번 pin EXT_FLASH_EN 제어, High Output) 
    #
    #3. Indigo - Event n 에서 Ext Flash 접근 권한 요청 handling (EXT_FLASH_EN pin) #? Low or High?
    #3-1. if Low 
    #    3-1-1. if (FW_Update_Process_Status == 0xFFFFFFFF),
    #                                                    SPI Switch IC Disable (Host 차단)
    #                                                    w32 FW_Update_Process_Status 0x00000000
    #        3-1-1-1. if (FW_Update_Flag == 0xFFFFFFFF), FW Writing 완료 
    #                                                    FW_Update_Flag - 별도 영역에 복사 이후, 0x00000000으로 초기화.  
    #                                                    Event Exit 
    #        3-1-1-2. if (FW_Update_Flag == 0x00000000), Host의 통신 실패 
    #                                                    Event Exit 
    #        # 업데이트 완료 여부에 따라서, FW_Update_Flag 값을 따로 복사해두고, 실제 Indigo FW update 시에 check용으로 활용.
    #    3-1-2. if (FW_Update_Process_Status == 0x00000000), 업데이트 없거나, Ver이 안 맞음. 
    #                                                        Event Exit 
    #3-2. if High -> 4번으로 이동
    #
    #4. FW_Update_Process_Status 변수 상태 확인       #? Indigo 입장에서, Pin Low 상태에서는 계속 FW ver read와 Switch IC Enable을 반복해서 해줘야 하는 문제가 있음. 그래서 Status 변수 하나 추가함.  
    #4-1. 변수 상태가 idle or completed, -> 5번으로 이동  
    #4-2. 변수 상태가 FW update request & writing, -> Event Exit #? 이미 Switch IC enable했고, Ver도 확인 된 상태이므로, 추가 작업 불필요. 
    #
    #5. Indigo - Int Flash 특정 영역에 F/W version read (현 Ver과 신 Ver에 대한 비교)
    #5-1. 신규 FW가 맞다면, -> 6번으로 이동 
    #5-2. 신규 FW가 아니면, -> Reject & Event Exit #? Reject를 어떻게 할 건지? Reject를 해줘야 Host가 EXT_FLASH_EN을 High return. 5번에서 Host가 반복 read를 해도 값이 안 읽어지면 Indigo가 Reject한 걸로 판단?  
    #
    #6. Ext Flash 접근 권한 수락 
    #Indigo - Ext Flash에 대한 Switch IC Enable (SPI_EIRQ? pin 제어), w32 FW_Update_Process_Status 0xFFFFFFFF
    #Host - Ext Flash에 대해 접근 시도를 하다가, Switch IC Enable 되면 본격적으로 신규 FW Writing 
    ##? FW Writing Ready 상태를 알려주면 좋겠는데... 일단은 Ext Flash 특정 영역에 특정 값을 정하고, Host가 해당 값이 올바르게 읽어지면 Writing 시작하는 걸로... 예 : nn Sector n번지에 0xFEEDCAFE 
    #
    #7. Host - Ext Flash 신규 FW writing....... 
    #7-1. writing 중이면, Indigo - Event Exit (4번에서 Event Exit 자동 수행)
    #7-2. Writing 완료되면, Host - w32 FW_Update_Flag 0xFFFFFFFF, Ext Flash 접근 권한 요청 해제 (Host의 Deserializer 24번 핀 EXT_FLASH_EN 제어, Low Output) 
    #                      Indigo - 3번에서 SPI Switch IC Disable, 변수 값 변경 (w32 FW_Update_Process_Status 0x00000000) 
    ##
    #
#


#? Fault Handler (Event1에서 호출)
#? 1. 하나의 Fault마다 32bit (4Bytes = 1word)로 되어 있는 Fault 변수에 대해, bit 변환 -> Hex2Bit 
#? 2. Fault 발생 확인 
#? 2-1. Fault 발생 안 함. -> Exit 
#? 2-2. Fault 발생 -> 3 
#? 3. Int Flash에 Fault Write 
#? 4. 

#? 2. Int Flash에 Fault Write
#? 3. Fault 발생 시 SYS_FAULT pin - Low 출력 
#? 3. Fault 발생 시 Ext Flash에 log 

#! Fault 관련 
#! SYS_FAULT pin : Error가 있을 때 Low. error가 사라지기 전까지 Low 유지하다가 Error가 사라지면 High로 변경. 
#! 즉, ADC가 범위 밖 벗어나면 Low로 출력했다가, ADC 범위 내로 들어오면 High 출력. 단 log는 남긴다.

#$ 0xnnnnnnnn   Current_Fault_Result     :   현재 시점에 여러 Fault 변수에 대해 1워드로 변환 , Boot 시 0x0~0으로 초기화 필수 
#$ 0xnnnnnnnn   Past_Fault_Result        :   과거 시점에 여러 Fault 변수에 대해 1워드로 변환 , Boot 시 0x0~0으로 초기화 필수 

###################################################################################################################
###################################################################################################################
###################################################################################################################
## Fault Handler @Event1 


## n words -> 1 word 
fncCall     #name:HEX2BIT# 

## Fault occurence check 
r32 Current_Fault_Result    
i4drcheck 0x00000000
    jmpnamed    always  0       #name:FAULT_OCCURED#   
    jmpnamed    always  0       #name:FAULT_NOT_OCCURED# 
   
lblnamed                        #name:FAULT_OCCURED# 
## Fault Log : RAM -> Int Flash 
#? 명령어 argu 수정 필요 
w32	0x60140010	0x00000000		# Write C, 상태 확인 변수 Clear 
w32	0x60140004	0x60100000		# DST Address, 저장 위치 
w32	0x60140008	0x00027000		# Data Size 
w32	0x6014000C	0x00400000		# SRC Address

w32	0x0002C300	0x60140300		# CMDSEQ1 - Flash Write #? 해당 부분은 Event에서 CMDSEQ1을 사용 못 하므로, 꼭 수정 해야 함. 

#? CMDSEQ1을 사용 못 하기에, CMDSEQ0가 Read C를 완료하게 됨. Infinite_loop_exception_handler 불필요. 
#w32	Delay_Count	0x000186A0		# Delay_Count * Delay_Tick = 100ms
#w32	Delay_Tick	0x00000001 		# 1us 
#i4call Infinite_loop_exception_handler 


## SYS_FAULT Low 
fncCall                         #name:SYS_FAULT_OUT# 

## Compare Past & Current 
r32 Current_Fault_Result        # DREG1 = DREG0, DREG0 = Current_Fault_Result 
r32 Past_Fault_Result           # DREG1 = Current_Fault_Result, DREG0 = Past_Fault_Result 
jmpnamed    !=  0               #name:FAULT_HANDLER_END# 

## Fault Update, Fault Log : RAM-> Ext Flash 
#? 1. Ext Flash(Sector128~143) Fault Log 영역을 우선 RAM으로 Backup. 
#? 2. RAM으로 Backup 된 영역에서 업데이트 
#? 3. 업데이트 된 RAM data를 Ext Flash에 Write 

# 1. Ext Flash -> RAM (Fault Log + Log data size) #? 명령어 argu 수정 필요 
w32	0x60140010	0x00000000		# Read C, 상태 확인 변수 Clear
w32	0x60140004	0x60100000		# DST Address, 저장 위치 
w32	0x60140008	0x00027000		# Data Size 
w32	0x6014000C	0x00400000		# SRC Address, 

w32	0x0002C300	0x60140030		# CMDSEQ1 - Flash Read #? 해당 부분은 Event에서 CMDSEQ1을 사용 못 하므로, 꼭 수정 해야 함. 


# 2. RAM data update 
#? Fault Log area의 data overflow에 대해서는 예외처리 하지 않음. 
# Ext Flash Fault Log - Start Addr : 0x00080000, 고정 
# RAM Fault Log backup - Start Addr : 0x6~~~~~~~ (현재 미정이나 고정)

# Data Size 
r32 ExtFlash_FaultSize          # Ext Flash Fault log data size #? 과거 log data는 보존해야 하므로 필요. 해당 변수는 1번 과정에서 수행. 
i4drload    Fault_RAM_Start_Address   # DREG1 = ExtFlash_FaultSize, DREG0 = Fault_RAM_Start_Address #? 해당 Argu는 RAM의 Fault log 영역 첫 주소 
i4dr1add0                       # DREG0 += DREG1 
r32 Current_Fault_Result        # DREG1 = DREG0, DREG0 = Current_Fault_Result 
i4reverse                       # DREG0 (Store Addr) <-> DREG1 (Current_Fault_Result)
i4poke                          # Store Addr = Current_Fault_Result 

# Data size inc 
r32 ExtFlash_FaultSize          
i4inc4
i4drput 32  ExtFlash_FaultSize  

# 3. RAM -> Ext Flash (Fault Log + Log data size) #? 명령어 argu 수정 필요 
w32	0x60140010	0x00000000		# Write C, 상태 확인 변수 Clear 
w32	0x60140004	0x60100000		# DST Address, 저장 위치 
w32	0x60140008	0x00027000		# Data Size 
w32	0x6014000C	0x00400000		# SRC Address

w32	0x0002C300	0x60140300		# CMDSEQ1 - Flash Write #? 해당 부분은 Event에서 CMDSEQ1을 사용 못 하므로, 꼭 수정 해야 함. 

## Fault Not Occured 
lblnamed                        #name:FAULT_NOT_OCCURED# 
fncCall                         #name:SYS_FAULT_OUT# High 
w32 Past_Fault_Result   0x00000000 # Vari Clear 

## End 
lblnamed                        #name:FAULT_HANDLER_END# 
i4return                        # End 

###################################################################################################################
###################################################################################################################
###################################################################################################################
## Fault Hex2Bit 

#! Fault log 관련 변수는 메모리 주소를 한 곳에 위치시켜야 함. 
#? 각(총 ??개) Fault 변수에 대해, bit 단위로 변환하여, 모든 Fault에 대해 총 32bits (4Bytes, 1Word)로 변환. 
#? ADC - Over Voltage와 Under Voltage에 대해 변수 하나로 Fault 기록하면 안 됨. OV, UV 각각 따로 해야 아래 동작 가능. 

fncBegin                    #name:HEX2BIT# 

i4bufclr    0               # Buffer[1] : src addr 
i4bufclr    1               # Buffer[2] : bit number, loop 한번 돌 때마다 좌측으로 bit shift 한번. 
i4bufinc    1               # Buffer[2] = 0..01b Init. 

#? 1안 
i4drload    0x00000000      # DREG1 = DREG0, DREG0 = 0x00000000, Fault 변수 중 주소 가장 첫 번째. #? argu 수정 필요 
i4drsave    0               # Buffer[1] = src addr 
i4peek      32              # DREG0 = *DREG0 

#? 2안 - 고민중. 

#@ Hex2Bit Loop Start 
lblnamed                    #name:HEXT2BIT_CALC_LOOP# 

# Fault occurence check 
i4drcheck   0xFFFFFFFF      # Fault 발생 여부 check 
    jmpnamed    always  0   #name:HEX2BIT_NOT_ADD#  if 0x0~0, Not add 
    jmpnamed    always  0   #name:HeX2BIT_ADD#      if 0xF~F, add 

# Fault bit set 
lblnamed    #name:HEX2BIT_ADD# 
i4drrestore     1                   # DREG1 = DREG0, DREG0 = Buffer[2] 
i4drget Current_Fault_Result        # DREG1 = Buffer[2], DREG0 = Current_Fault_Result
i4dr1add0                           # DREG0+=DREG1 
i4drput 32  Current_Fault_Result    # Current_Fault_Result = DREG0   #? argu 수정 필요 

# Fault bit unset 
lblnamed    #name:HEX2BIT_NOT_ADD# 
i4drrestore     1   # DREG1 = DREG0, DREG0 = Buffer[2] 
i4drshiftl      1   # DREG0 <<= 1 
i4drsave        1   # Buffer[2] = DREG0 

# Fault Log addr inc 
i4drrestore 0       # DREG1 = DREG0, DREG0 = Buffer[1] 
i4inc4 
i4drsave    0       # Buffer[1] = DREG0 
i4peek      32      # 

# loop check 
i4bufcheck  1   0x80000000  # if Buffer[2] == 0x80000000, #? 0x8~0으로 하든가, 아니면 overflow 됐을 때로 보고 0x0~0으로 하든가. 둘 중 하나. 어차피 Fault는 32개 안 넘을 듯. 
	jmpnaed	always	0	#name:HEX2BIT_CALC_LOOP# 
    #@ Loop end 
	jmpnaed	always	0	#name:HEX2BIT_CALC_END# 

lblnamed                #name:HEX2BIT_CALC_END# 

fncEnd                      #name:HEX2BIT# 

###################################################################################################################
###################################################################################################################
###################################################################################################################
## SYS_FAULT_OUT

#! Error가 발생하면 Low 유지. Error가 사라지면 High로 변경. 즉, 하나의 Error라도 계속 유지 되면, SYS_FAULT는 Low를 유지한다. 
#! 단, Error가 사라져도 Log는 남겨야 함. 

#$ SCH net name : SYS_FAULT[GPIO59] (OK - High, Fault - Low)

#w32	0x0000090C	0x00000080		#path:INDIGO4L.GC_PIN.GPIO59_CTL#	- GPIO, DRV_2mA, Pulldown, slow, disable 

fncBegin        #name:SYS_FAULT_OUT# 
r32 0xnnnnnnnn  # DREG0 = Current_Fault_Result 
i4drcheck   0x00000000      # if 
    wf32    0x000A800C  27  1   1   # POCR0 High : Low, Fault occured 
    wf32    0x000A8004  27  1   1   # POSR0 High : High, Fault not occured 
fncEnd          #name:SYS_FAULT_OUT# 






