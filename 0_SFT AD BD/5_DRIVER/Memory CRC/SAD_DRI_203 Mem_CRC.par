# Indigo4L
# SC1721

#^ 2024.11.11 

#^ Component ID : SAD_DRI_203 
#^ Internal Flash Address : 미정 
#^ RAM : 미정 
#^ Size : 0x234 (564 Bytes)
#^ 전달 인자(GPreg)를 받을 RAM 주소 : 
#^ 반환 인자(GPreg)에 전달할 RAM 주소 : 

#^ UNIT 
#^ 1. CRC_Location 
#^ 2. CRC_EXECUTE 


#^ Memory CRC 
#^ 진행 위치, 모두 Boot Seq에서만 진행. 
#^ 1. RAM (Image Only) 
#^      Ext Flash에서 RAM으로 복사한 Image data CRC 
#^      Src Addr 가변 - NM or SM  
#^      length 가변 (Image Data size가 바뀔 수도 있음.)
#^      Expected Value  가변 
#^ 2. Int Flash (192KB full size) 
#^      Ext Flash에서 Int Flash로 복사한 New FW CRC 
#^      Src Addr 고정 
#^      length 고정 
#^      Expected Value  가변 


#^ ※ 제어기 입장에서는 고정, 가변 상관 없이 정해진 Sector에 예상값, 시작주소, 길이 순으로 적어주면 됨. 
#! ※ CRCPoly(0x4C11DB7), CRCSEED(0xFFFFFFFF), CRCFXOR(0xFFFFFFFF), CRCCFG(Reflection In/Out Disabled) - 제어기와 고정. 

#$ 
    #$ Input - Argu 
    #$ CRC_Expected_Result  0x60000900      GPreg[0]    0x00040200
    #$ CRC_SrcAddress       0x60000904      GPreg[1]    0x00040204 
    #$ CRC_Calc_Length      0x60000908      GPreg[2]    0x00040208 
    #$ CRC_Data_Location    0x6000090C      GPreg[3]    0x0004020C 

    #$ Output 
    #$ CRC_Success_Status   0x60000914      GPreg[31]   0x0004020C 
#$


###################################################################################################################
###################################################################################################################
###################################################################################################################
## 1 Unit - CRC_Location 
#@ caller - other COMPs 

lblnamed        #name:CRC_Location# 

# Buffer Clear - #! COMP 시작에서는 모든 error 방지 차원에서 반드시 Buffer Clear 해줄 것.  
i4bufclr    0
i4bufclr    1
i4bufclr    2
i4bufclr    3
i4bufclr    4
i4bufclr    5
i4bufclr    6
i4bufclr    7
i4bufclr    8
i4bufclr    9
i4bufclr    10
i4bufclr    11
i4bufclr    12 

#% COMP 전달인자 (caller other COMPs - callee SAD_DRI_203)
r32 0x00040200                  
i4drput 32  0x60000900          # CRC_Expected_Result = GPreg[0] 
r32 0x00040204                  
i4drput 32  0x60000904          # CRC_SrcAddress = GPreg[1] 
r32 0x00040208                  
i4drput 32  0x60000908          # CRC_Calc_Length = GPreg[2]
r32 0x0004020C 
i4drput 32  0x6000090C          # CRC_Data_Location = GPreg[3] 

## CRC Reg Init 
lblnamed                        #name:CRC_REG_INIT#
w32 0x00027000  0x04C11DB7      # PRGCRC.CRCPOLY - CRC32/IEEE802.3 
w32 0x00027004  0xFFFFFFFF      # PRGCRC.CRCSEED
w32 0x00027008  0xFFFFFFFF      # PRGCRC.CRCFXOR
w32 0x0002700C  0x00E00000      # PRGCRC.CRCCFG - Reflection In/Out Disabled 

#@ Unit call 
#% UNIT 전달인자  
r32 0x60000900                  # 
i4drsave    0                   # Buffer[0] = DREG0, CRC_Expected_Result 
r32 0x60000904                  # 
i4drsave    1                   # Buffer[1] = DREG0, CRC_SrcAddress 
r32 0x60000908                  # 
i4drsave    2                   # Buffer[2] = DREG0, CRC_Calc_Length 
r32 0x6000090C                  #
i4drsave    3                   # Buffer[3] = DREG0, CRC_Data_Location 

fncCall         #name:CRC_EXECUTE# 

#% COMP 반환인자 - 반환인자 받은 COMP는 해당 변수를 확인하여 CRC 성공 여부를 확인해야 함.  
i4drrestore 12                  # DREG0 = Buffer[12] 
i4drput 32  0x0004027C          # GPreg[31] = CRC_Success_Status 

i4return




###################################################################################################################
###################################################################################################################
###################################################################################################################
## 2 Uuit - CRC_EXECUTE
#@ caller - CRC_Location 

#% UNIT 전달인자 
#% Buffer[0]    CRC_Expected_Result     0x60000900 
#% Buffer[1]    CRC_SrcAddress          0x60000904   
#% Buffer[2]    CRC_Calc_Length         0x60000908  
#% Buffer[3]    CRC_Data_Location       0x6000090C 

#% 내부 사용 : Buffer[4,5] 
#% Buffer[5]    value counter   (data size)
#% Buffer[6]    current value address (from start address)
#% Buffer[7]    timeout counter value 

fncBegin            #name:CRC_EXECUTE# 

# Load value counter into buffer 2
i4drrestore 2       # DREG1 = DREG0, DREG0 = Buffer[2], CRC_Calc_Length 
i4drsave 5          # value counter 

# Load start address into buffer 1
i4drrestore 1       # DREG1 = DREG0, DREG0 = Buffer[1], CRC_SrcAddress  
i4drsave 6          # current value address 

#@ outer loop start - CRC Calculation 
# CRC calculation main loop
# Step through all 16 words in the array and add them to the CRC write register PRGCRC.CRCWR
lblnamed                #name:CRC_CALCULATION_LOOP#

i4bufcheck  5   0       # Check if value counter is zero ...    
    # ... if not zero, we need to start/continue processing
    jmpnamed    always  0       #name:CRC_CALCULATION_PROCESSING#      
    # ... if zero, we are finished and can leave the processing
    jmpnamed    always  0       #name:CRC_CALCULATION_PROCESSING_END#    

## CRC PROCESSING - START / CONTINUE 
lblnamed                #name:CRC_CALCULATION_PROCESSING#
i4bufdec    5           # Immediately decrese value counter in buffer 5     

## CALCULATION - START 
# Set/Reset a timeout counter to prevent hang ups while waiting for CRC unit ready signaling
i4drload    0x04        # timeout counter value         #? 0x04가 적합한지 확인 필요. 
i4drsave    7           # timeout counter              

    #@ inner loop start - CRC UNIT READY CHECK
    lblnamed                    #name:CRC_UNIT_READY_CHECK_LOOP#
    i4bufcheck  7   0           # Check if CRC unit ready timeout counter is zero ...   
        jmpnamed    always  0   #name:CRC_UNIT_READY_CHECK#     we can start checking the CRC unit for being ready
        jmpnamed    always  0   #name:CRC_UNIT_READY_FAILED#    the crc unit was not accessable several times and we leave with an error

    ## CRC unit ready processing
    lblnamed                    #name:CRC_UNIT_READY_CHECK#
    i4bufdec    7               # Immediately decrese timeout counter in buffer 7   
    # HERE WE CHECK IF THE CRC UNIT IS READY AND CAN BE ACCESSED
    rf32    0x0002700C  28  1   # PRGCRC.CRCCFG.LOCK
    i4drcheck 0x00000000        # Check if CRC unit is ready ...
        jmpnamed    always  0   #name:CRC_UNIT_BUSY#        the crc unit is busy and we need to check again
        jmpnamed    always  0   #name:CRC_UNIT_READY#       the crc unit is ready and we can continue with CRC calculation

    ## CRC UNIT BUSY 
    lblnamed                    #name:CRC_UNIT_BUSY#
    d   1                       # wait a while when busy, 1 microsecond
    jmpnamed    always  0       #name:CRC_UNIT_READY_CHECK_LOOP#    jump back to ready check loop
    #@ inner loop end - CRC UNIT READY CHECK  

## CRC UNIT READY 
lblnamed                    #name:CRC_UNIT_READY#   CRC unit is ready
i4drrestore 6               # Get address stored in buffer 6        
i4arload                    # Load address from data register into adress register
i4argetindirect 32          # Get data from adress in adress register
## NOW THE VALUE IS AVAILABLE IN THE DATA REGISTER AND CAN BE ADDED TO THE CRC UNIT ... PRGCRC.CRCWR
i4drput 32 0x00027010       # PRGCRC.CRCWR
## CALCULATION - END 

i4drrestore 6               # Get current value address     
i4inc4                      # Increase current value address
i4drsave 6                  # Store current value address back to buffer 6 
jmpnamed    always  0       #name:CRC_CALCULATION_LOOP#     Finally jump back to the main calculation routine
#@ outer loop end - CRC Calculation 


## CRC PROCESSING END 
lblnamed                        #name:CRC_CALCULATION_PROCESSING_END#
i4drget 32 0x00027014           # Get the CRC value from PRGCRC.CRCRD
i4drput 32 0x60000910           # CRC_Result_Value, Store the CRC value in memory 
i4drrestore 0                   # DREG1 = DREG0, DREG0 = Buffer[0], CRC_Expected_Result, Get the reference CRC value
jmpnamed    ==  0               #name:CRC_CHECK_SUCCESS#            If they are equal jump to success
    jmpnamed    always  0       #name:CRC_RESULT_COMPARE_FAILED#    In all other cases signalize a compare error

## CRC LOCATION FAILED 
lblnamed                    #name:CRC_LOCATION_FAILED#
w32 0x60000914  0x33333333  # CRC_Success_Status = CRC Location Fail 
jmpnamed    always  0       #name:CRC_CALCULATION_MAIN_END# 

## CRC RESULT COMPARE FAILED 
#? CRC 위치에 따라, Fault 변수 설정해줘야 함. 
lblnamed                        #name:CRC_RESULT_COMPARE_FAILED#
w32 0x60000914  0x0000FFFF      # CRC_Success_Status = CRC Compare Fail 

i4drrestore 3                   # DREG0 = Buffer[3], CRC_Data_Location     
i4drcheck   0x11111111          # NM Image 
    jmpnamed    always  0       #name:RESULT_CRC_2ND_LOCATION# 
    w32 0x6000091C  0x0000FFFF  # IMAGE_DATA_CRC_Error

lblnamed                        #name:RESULT_CRC_2ND_LOCATION#      
i4drcheck   0x22222222          # SM Image 
    jmpnamed always 0           #name:RESULT_CRC_3RD_LOCATION# 
    w32 0x6000091C  0x0000FFFF  # IMAGE_DATA_CRC_Error

lblnamed                        #name:RESULT_CRC_3RD_LOCATION# 
i4drcheck   0x33333333          # New FW  
    jmpnamed    always  0       #name:CRC_CALCULATION_MAIN_END#
    w32 0x60000918  0x0000FFFF  # FW_DATA_CRC_Error

jmpnamed    always  0           #name:CRC_CALCULATION_MAIN_END#

## CRC READY FAILED  
lblnamed                    #name:CRC_UNIT_READY_FAILED#
w32 0x60000914  0x22222222  # CRC_Success_Status = CRC Ready Fail 
jmpnamed    always  0       #name:CRC_CALCULATION_MAIN_END#

## CRC SUCCESS 
lblnamed                    #name:CRC_CHECK_SUCCESS#
w32 0x60000914  0x11111111  # CRC_Success_Status = CRC Success 
jmpnamed    always  0       #name:CRC_CALCULATION_MAIN_END#

## MAIN - END 
lblnamed                #name:CRC_CALCULATION_MAIN_END#

#% UNIT 반환인자 
r32 0x60000914          # DREG0 = CRC_Success_Status  
i4bufclr    12
i4drsave    12          # Buffer[12] = CRC_Success_Status 

fncEnd                  #name:CRC_EXECUTE# 


i4end 
e 

